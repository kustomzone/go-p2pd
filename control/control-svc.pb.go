// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/paralin/go-p2pd/control/control-svc.proto

/*
Package control is a generated protocol buffer package.

It is generated from these files:
	github.com/paralin/go-p2pd/control/control-svc.proto

It has these top-level messages:
	CreateNodeRequest
	CreateNodeResponse
	StartNodeRequest
	StartNodeResponse
	ListenNodeRequest
	ListenNodeResponse
	StatusNodeRequest
	StatusNodeResponse
*/
package control

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import node "github.com/paralin/go-p2pd/node"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CreateNodeRequest is the argument to CreateNode.
type CreateNodeRequest struct {
	// NodeId is the desired ID for the node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *CreateNodeRequest) Reset()                    { *m = CreateNodeRequest{} }
func (m *CreateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeRequest) ProtoMessage()               {}
func (*CreateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// CreateNodeResponse is the response to CreateNode.
type CreateNodeResponse struct {
	// NodePeerId is the peer ID of the new node.
	NodePeerId string `protobuf:"bytes,1,opt,name=node_peer_id,json=nodePeerId" json:"node_peer_id,omitempty"`
}

func (m *CreateNodeResponse) Reset()                    { *m = CreateNodeResponse{} }
func (m *CreateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeResponse) ProtoMessage()               {}
func (*CreateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateNodeResponse) GetNodePeerId() string {
	if m != nil {
		return m.NodePeerId
	}
	return ""
}

// StartNodeRequest is the argument to the StartNode call.
type StartNodeRequest struct {
	// NodeId is the ID of the node as given at creation time.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *StartNodeRequest) Reset()                    { *m = StartNodeRequest{} }
func (m *StartNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*StartNodeRequest) ProtoMessage()               {}
func (*StartNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StartNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// StartNodeResponse is the response to the StartNode call.
type StartNodeResponse struct {
	// NodePeerId is the peer ID of the node.
	NodePeerId string `protobuf:"bytes,1,opt,name=node_peer_id,json=nodePeerId" json:"node_peer_id,omitempty"`
	// NodeListenAddrs are the addresses the node is listening on.
	NodeListenAddrs []string `protobuf:"bytes,2,rep,name=node_listen_addrs,json=nodeListenAddrs" json:"node_listen_addrs,omitempty"`
}

func (m *StartNodeResponse) Reset()                    { *m = StartNodeResponse{} }
func (m *StartNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*StartNodeResponse) ProtoMessage()               {}
func (*StartNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartNodeResponse) GetNodePeerId() string {
	if m != nil {
		return m.NodePeerId
	}
	return ""
}

func (m *StartNodeResponse) GetNodeListenAddrs() []string {
	if m != nil {
		return m.NodeListenAddrs
	}
	return nil
}

// ListenNodeRequest is the argument to the ListenNode call.
type ListenNodeRequest struct {
	// NodeId is the ID of the node as given at creation time.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Addr is the address to listen to.
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *ListenNodeRequest) Reset()                    { *m = ListenNodeRequest{} }
func (m *ListenNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenNodeRequest) ProtoMessage()               {}
func (*ListenNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListenNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ListenNodeRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// ListenNodeResponse is the response to the ListenNode call.
type ListenNodeResponse struct {
	// NodePeerId is the peer ID of the node.
	NodePeerId string `protobuf:"bytes,1,opt,name=node_peer_id,json=nodePeerId" json:"node_peer_id,omitempty"`
	// NodeListenAddrs are the addresses the node is listening on.
	NodeListenAddrs []string `protobuf:"bytes,2,rep,name=node_listen_addrs,json=nodeListenAddrs" json:"node_listen_addrs,omitempty"`
}

func (m *ListenNodeResponse) Reset()                    { *m = ListenNodeResponse{} }
func (m *ListenNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ListenNodeResponse) ProtoMessage()               {}
func (*ListenNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListenNodeResponse) GetNodePeerId() string {
	if m != nil {
		return m.NodePeerId
	}
	return ""
}

func (m *ListenNodeResponse) GetNodeListenAddrs() []string {
	if m != nil {
		return m.NodeListenAddrs
	}
	return nil
}

// StatusNodeRequest is the argument to StatusNode.
type StatusNodeRequest struct {
	// NodeId is the desired ID for the status report.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *StatusNodeRequest) Reset()                    { *m = StatusNodeRequest{} }
func (m *StatusNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusNodeRequest) ProtoMessage()               {}
func (*StatusNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StatusNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// StatusNodeResponse is the response to StatusNode.
type StatusNodeResponse struct {
	// NodePeerId is the peer ID of the node.
	NodePeerId string `protobuf:"bytes,1,opt,name=node_peer_id,json=nodePeerId" json:"node_peer_id,omitempty"`
	// NodeListenAddrs are the addresses the node is listening on.
	NodeListenAddrs []string `protobuf:"bytes,2,rep,name=node_listen_addrs,json=nodeListenAddrs" json:"node_listen_addrs,omitempty"`
	// NodeState is the state of the node.
	NodeState node.NodeSpecState `protobuf:"varint,3,opt,name=node_state,json=nodeState,enum=node.NodeSpecState" json:"node_state,omitempty"`
}

func (m *StatusNodeResponse) Reset()                    { *m = StatusNodeResponse{} }
func (m *StatusNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusNodeResponse) ProtoMessage()               {}
func (*StatusNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StatusNodeResponse) GetNodePeerId() string {
	if m != nil {
		return m.NodePeerId
	}
	return ""
}

func (m *StatusNodeResponse) GetNodeListenAddrs() []string {
	if m != nil {
		return m.NodeListenAddrs
	}
	return nil
}

func (m *StatusNodeResponse) GetNodeState() node.NodeSpecState {
	if m != nil {
		return m.NodeState
	}
	return node.NodeSpecState_NODE_SPEC_STATE_STOPPED
}

func init() {
	proto.RegisterType((*CreateNodeRequest)(nil), "control.CreateNodeRequest")
	proto.RegisterType((*CreateNodeResponse)(nil), "control.CreateNodeResponse")
	proto.RegisterType((*StartNodeRequest)(nil), "control.StartNodeRequest")
	proto.RegisterType((*StartNodeResponse)(nil), "control.StartNodeResponse")
	proto.RegisterType((*ListenNodeRequest)(nil), "control.ListenNodeRequest")
	proto.RegisterType((*ListenNodeResponse)(nil), "control.ListenNodeResponse")
	proto.RegisterType((*StatusNodeRequest)(nil), "control.StatusNodeRequest")
	proto.RegisterType((*StatusNodeResponse)(nil), "control.StatusNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ControlService service

type ControlServiceClient interface {
	// CreateNode creates a new node.
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	// StartNode starts a node.
	StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error)
	// ListenNode instructs a node to listen to an address.
	ListenNode(ctx context.Context, in *ListenNodeRequest, opts ...grpc.CallOption) (*ListenNodeResponse, error)
	// StatusNode checks a node's status.
	StatusNode(ctx context.Context, in *StatusNodeRequest, opts ...grpc.CallOption) (*StatusNodeResponse, error)
}

type controlServiceClient struct {
	cc *grpc.ClientConn
}

func NewControlServiceClient(cc *grpc.ClientConn) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	out := new(CreateNodeResponse)
	err := grpc.Invoke(ctx, "/control.ControlService/CreateNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error) {
	out := new(StartNodeResponse)
	err := grpc.Invoke(ctx, "/control.ControlService/StartNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) ListenNode(ctx context.Context, in *ListenNodeRequest, opts ...grpc.CallOption) (*ListenNodeResponse, error) {
	out := new(ListenNodeResponse)
	err := grpc.Invoke(ctx, "/control.ControlService/ListenNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) StatusNode(ctx context.Context, in *StatusNodeRequest, opts ...grpc.CallOption) (*StatusNodeResponse, error) {
	out := new(StatusNodeResponse)
	err := grpc.Invoke(ctx, "/control.ControlService/StatusNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControlService service

type ControlServiceServer interface {
	// CreateNode creates a new node.
	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	// StartNode starts a node.
	StartNode(context.Context, *StartNodeRequest) (*StartNodeResponse, error)
	// ListenNode instructs a node to listen to an address.
	ListenNode(context.Context, *ListenNodeRequest) (*ListenNodeResponse, error)
	// StatusNode checks a node's status.
	StatusNode(context.Context, *StatusNodeRequest) (*StatusNodeResponse, error)
}

func RegisterControlServiceServer(s *grpc.Server, srv ControlServiceServer) {
	s.RegisterService(&_ControlService_serviceDesc, srv)
}

func _ControlService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.ControlService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_StartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).StartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.ControlService/StartNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).StartNode(ctx, req.(*StartNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_ListenNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).ListenNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.ControlService/ListenNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).ListenNode(ctx, req.(*ListenNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_StatusNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).StatusNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.ControlService/StatusNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).StatusNode(ctx, req.(*StatusNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "control.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _ControlService_CreateNode_Handler,
		},
		{
			MethodName: "StartNode",
			Handler:    _ControlService_StartNode_Handler,
		},
		{
			MethodName: "ListenNode",
			Handler:    _ControlService_ListenNode_Handler,
		},
		{
			MethodName: "StatusNode",
			Handler:    _ControlService_StatusNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/paralin/go-p2pd/control/control-svc.proto",
}

func init() {
	proto.RegisterFile("github.com/paralin/go-p2pd/control/control-svc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6b, 0xea, 0x40,
	0x14, 0x35, 0xfa, 0x50, 0x72, 0x79, 0xf8, 0x5e, 0xe6, 0x2d, 0x5e, 0x9a, 0x6e, 0x42, 0x56, 0xd2,
	0x6a, 0x84, 0xf4, 0x63, 0xdd, 0x62, 0x41, 0x84, 0x52, 0x4a, 0xfc, 0x01, 0x12, 0x33, 0x17, 0x1b,
	0xb0, 0x99, 0xe9, 0xcc, 0xe8, 0x4f, 0xe9, 0xff, 0xe8, 0x3f, 0x2c, 0x33, 0xb1, 0x26, 0x36, 0x52,
	0xb2, 0x71, 0x93, 0xcc, 0x9c, 0x39, 0xf7, 0xde, 0x93, 0x39, 0x27, 0x70, 0xbd, 0xca, 0xd4, 0xcb,
	0x66, 0x19, 0xa6, 0xec, 0x75, 0xcc, 0x13, 0x91, 0xac, 0xb3, 0x7c, 0xbc, 0x62, 0x23, 0x1e, 0x71,
	0x3a, 0x4e, 0x59, 0xae, 0x04, 0x5b, 0x7f, 0xbd, 0x47, 0x72, 0x9b, 0x86, 0x5c, 0x30, 0xc5, 0x48,
	0x6f, 0x07, 0x79, 0x37, 0x3f, 0x94, 0xe7, 0x8c, 0xa2, 0x79, 0x2c, 0x24, 0xc7, 0x74, 0x21, 0x55,
	0xa2, 0xb0, 0xa8, 0x0f, 0x86, 0xe0, 0x4c, 0x04, 0x26, 0x0a, 0x9f, 0x18, 0xc5, 0x18, 0xdf, 0x36,
	0x28, 0x15, 0xf9, 0x0f, 0x3d, 0xc3, 0xce, 0xa8, 0x6b, 0xf9, 0xd6, 0xc0, 0x8e, 0xbb, 0x7a, 0x3b,
	0xa3, 0xc1, 0x2d, 0x90, 0x2a, 0x5b, 0x72, 0x96, 0x4b, 0x24, 0x3e, 0xfc, 0x36, 0x74, 0x8e, 0x28,
	0xca, 0x1a, 0xd0, 0xd8, 0x33, 0xa2, 0x98, 0xd1, 0xe0, 0x12, 0xfe, 0xce, 0x55, 0x22, 0x54, 0xa3,
	0x21, 0x09, 0x38, 0x15, 0x72, 0xd3, 0x19, 0xe4, 0x02, 0x1c, 0xc3, 0x58, 0x67, 0x52, 0x61, 0xbe,
	0x48, 0x28, 0x15, 0xd2, 0x6d, 0xfb, 0x9d, 0x81, 0x1d, 0xff, 0xd1, 0x07, 0x8f, 0x06, 0xbf, 0xd7,
	0x70, 0x70, 0x07, 0x4e, 0xb1, 0x6d, 0x22, 0x88, 0x10, 0xf8, 0xa5, 0xbb, 0xb9, 0x6d, 0x83, 0x9a,
	0x75, 0xb0, 0x04, 0x52, 0xed, 0x70, 0x12, 0x95, 0x43, 0x73, 0x11, 0x6a, 0x23, 0x1b, 0x5d, 0xdb,
	0xbb, 0x05, 0xa4, 0x4a, 0x3f, 0x85, 0x24, 0x12, 0x01, 0x14, 0x39, 0xd2, 0x11, 0x72, 0x3b, 0xbe,
	0x35, 0xe8, 0x47, 0xff, 0x42, 0x0d, 0x85, 0x7a, 0xea, 0x9c, 0x63, 0xaa, 0x35, 0x60, 0x6c, 0x6b,
	0xcc, 0x2c, 0xa3, 0x8f, 0x36, 0xf4, 0x27, 0x45, 0x4a, 0xe7, 0x28, 0xb6, 0x59, 0x8a, 0x64, 0x0a,
	0x50, 0xe6, 0x88, 0x78, 0xe1, 0x2e, 0xc4, 0x61, 0x2d, 0x8a, 0xde, 0xf9, 0xd1, 0xb3, 0xe2, 0xdb,
	0x82, 0x16, 0x79, 0x00, 0x7b, 0x9f, 0x15, 0x72, 0xb6, 0xe7, 0x7e, 0x0f, 0x9b, 0xe7, 0x1d, 0x3b,
	0xda, 0x77, 0x99, 0x02, 0x94, 0x66, 0x56, 0xe4, 0xd4, 0x32, 0x52, 0x91, 0x53, 0x77, 0xbf, 0x68,
	0x54, 0x5a, 0x40, 0x0e, 0x86, 0x1e, 0xda, 0x58, 0x69, 0x54, 0xf7, 0x2c, 0x68, 0x2d, 0xbb, 0xe6,
	0xef, 0xbc, 0xfa, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x16, 0xfe, 0xc5, 0x15, 0x04, 0x00, 0x00,
}
